{"entries":[{"timestamp":1752786157329,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":205,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1752790733026,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":205,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1752790909385,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":38,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":176,"length1":62,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":205,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"added","filename":"custom.ts","value":"/**\n * Uma coleção de blocos inspirados em funções comuns do Python.\n */\n//% color=\"#3178C6\" icon=\"\\uf81f\" block=\"Python\"\n// A cor é um azul \"Python\", e o ícone é o logo do Python da biblioteca Font Awesome.\nnamespace python {\n\n    /**\n     * Exibe uma mensagem na tela por um curto período.\n     * Equivalente a print() em muitos contextos de aprendizado.\n     * @param text O texto a ser exibido, eg: \"Olá, Mundo!\"\n     */\n    //% block=\"print %text\"\n    //% group=\"I/O\" weight=100\n    export function print(text: any): void {\n        // Usamos 'any' para que o bloco aceite números, strings, etc., e os converta.\n        game.splash(text);\n    }\n\n    /**\n     * Pausa a execução do programa por um número de segundos.\n     * Equivalente a time.sleep().\n     * @param seconds A duração da pausa em segundos, eg: 1.5\n     */\n    //% block=\"sleep %seconds seconds\"\n    //% group=\"Control\" weight=90\n    export function sleep(seconds: number): void {\n        pause(seconds * 1000);\n    }\n\n    /**\n     * Pede ao usuário para digitar um texto e retorna o que foi digitado.\n     * Equivalente a input().\n     * @param prompt O texto a ser exibido para o usuário, eg: \"Qual é o seu nome?\"\n     */\n    //% block=\"input %prompt\"\n    //% group=\"I/O\" weight=80\n    export function input(prompt: string): string {\n        return game.askForString(prompt);\n    }\n\n    /**\n     * Retorna o número de itens em uma lista.\n     * Equivalente a len().\n     * @param list A lista a ser medida.\n     */\n    //% block=\"len of %list=variables_get(my_list)\"\n    //% group=\"Lists\" weight=60\n    export function len(list: any[]): number {\n        return list.length;\n    }\n\n    /**\n     * Converte qualquer valor para um texto (string).\n     * Equivalente a str().\n     * @param value O valor a ser convertido.\n     */\n    //% block=\"str %value\"\n    //% group=\"Casting\" weight=50\n    export function str(value: any): string {\n        return value;\n    }\n\n    /**\n     * Converte um texto para um número inteiro.\n     * Equivalente a int().\n     * @param text O texto a ser convertido, eg: \"123\"\n     */\n    //% block=\"int %text\"\n    //% group=\"Casting\" weight=40\n    export function int(text: string): number {\n        return parseInt(text);\n    }\n}"},{"type":"added","filename":"main.py","value":"len(\"fdfs\")\nstr(2)\nint(\"fdfs\")\n"}]},{"timestamp":1752791525809,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":5,"diffs":[[1,"len(\"fdfs\")\nstr(2)\nint(\"fdfs\")\n"]]}]}]},{"timestamp":1752791692070,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":70,"diffs":[[1,"\"fdfs\".length\n\"\" + 2\nparseInt(\"fdfs\")\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":67,"diffs":[[1,"from "]]}]}]},{"timestamp":1752792228676,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":245,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"pyprj\"\n"]]}]}]},{"timestamp":1752793212054,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":4,"length1":73,"diffs":[[1," * Uma coleção de blocos inspirados em funções comuns do Python.\n"]]},{"start1":73,"length1":45,"diffs":[[1,"//% color=\"#3178C6\" icon=\"\\uf81f\" block=\"Python\"\n// A cor é um azul \"Python\", e o ícone é o logo do Python da biblioteca Font Awesome.\n"]]},{"start1":529,"length1":44,"diffs":[[1,"        // Usamos 'any' para que o bloco aceite números, strings, etc., e os converta.\n        game.splash(text);\n"]]},{"start1":658,"length1":1657,"diffs":[[1,""]]},{"start1":865,"length1":19,"diffs":[[1,"    //% group=\"Control\" weight=90\n"]]},{"start1":996,"length1":162,"diffs":[[1,"     * Pede ao usuário para digitar um texto e retorna o que foi digitado.\n     * Equivalente a input().\n     * @param prompt O texto a ser exibido para o usuário, eg: \"Qual é o seu nome?\"\n"]]},{"start1":1193,"length1":114,"diffs":[[1,"    //% block=\"input %prompt\"\n    //% group=\"I/O\" weight=80\n    export function input(prompt: string): string {\n        return game.askForString(prompt);\n"]]},{"start1":1353,"length1":2,"diffs":[[1,""]]},{"start1":1354,"length1":164,"diffs":[[1,""]]},{"start1":1362,"length1":175,"diffs":[[1,"     * Retorna o número de itens em uma lista.\n     * Equivalente a len().\n     * @param list A lista a ser medida.\n"]]},{"start1":1486,"length1":147,"diffs":[[1,"    //% block=\"len of %list=variables_get(my_list)\"\n    //% group=\"Lists\" weight=60\n    export function len(list: any[]): number {\n        return list.length;\n"]]},{"start1":1660,"length1":108,"diffs":[[1,"     * Converte qualquer valor para um texto (string).\n     * Equivalente a str().\n     * @param value O valor a ser convertido.\n"]]},{"start1":1797,"length1":254,"diffs":[[1,"    //% block=\"str %value\"\n    //% group=\"Casting\" weight=50\n    export function str(value: any): string {\n        return value;\n"]]},{"start1":1941,"length1":93,"diffs":[[1,"     * Converte um texto para um número inteiro.\n     * Equivalente a int().\n     * @param text O texto a ser convertido, eg: \"123\"\n"]]},{"start1":2081,"length1":553,"diffs":[[1,"    //% block=\"int %text\"\n    //% group=\"Casting\" weight=40\n    export function int(text: string): number {\n        return parseInt(text);\n"]]},{"start1":2226,"length1":1199,"diffs":[[1,""]]}]}]},{"timestamp":1752793217963,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":181,"diffs":[[1,"let countdown = [1, 2, 3]\ncountdown.reverse()\npython.print(countdown)\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":81,"length1":49,"diffs":[[1,"//% color=\"#3178C6\" icon=\"Py\" block=\"Python\"\n"]]},{"start1":447,"length1":27,"diffs":[[1,"        game.splash(convert_to_text(text));\n"]]},{"start1":3281,"length1":23,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":68,"diffs":[[1,""]]},{"start1":1,"length1":92,"diffs":[[1,"countdown = [1, 2, 3]\ncountdown.reverse()\npython.print(countdown)\n"]]}]}]},{"timestamp":1752793815955,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":142,"length1":41,"diffs":[[1,"console.log(random.randrange(0, 0, 1))\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":3238,"length1":141,"diffs":[[1,"        return randint(a, b);\n        randint(0, 10)\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":68,"length1":0,"diffs":[[1,"\n"]]},{"start1":99,"length1":66,"diffs":[[1,"print(random.choice([1,2,3]))\nprint(random.randrange(0, 0, 1))"]]}]}]},{"timestamp":1752794414778,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":236,"diffs":[[1,"python.print(python.lower(\"OLA\"))\npython.print(python.upper(\"ola\"))\nconsole.log(random.randint(1, 100))\nconsole.log(random.choice([1, 2, 3]))\nconsole.log(random.randrange(10, 15, 1))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":245,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":4746,"length1":95,"diffs":[[1,"    export const punctuation = `!\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`;\n"]]},{"start1":4949,"length1":66,"diffs":[[1,"    export const digits = \"0123456789\";\n"]]},{"start1":5135,"length1":91,"diffs":[[1,"    export const ascii_lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n"]]},{"start1":5346,"length1":91,"diffs":[[1,"    export const ascii_uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n"]]},{"start1":5570,"length1":98,"diffs":[[1,"    export const ascii_letters = ascii_lowercase + ascii_uppercase;\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":214,"diffs":[[1,"python.print(python.lower(\"OLA\"))\npython.print(python.upper(\"ola\"))\nprint(random.randint(1, 100))\nprint(random.choice([1, 2, 3]))\nprint(random.randrange(10, 15, 1))"]]}]}]},{"timestamp":1752795010619,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":5694,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":24,"length1":51,"diffs":[[1,""]]},{"start1":91,"length1":0,"diffs":[[1,"let score = 0\n"]]},{"start1":205,"length1":380,"diffs":[[1,"    python.print(\"A ghost \")\n"]]},{"start1":236,"length1":80,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":10,"diffs":[[1,""]]},{"start1":13,"length1":0,"diffs":[[1,"\nimport random\n\n"]]},{"start1":56,"length1":0,"diffs":[[1,"\n"]]},{"start1":78,"length1":0,"diffs":[[1,"score = 0\n\n"]]},{"start1":186,"length1":435,"diffs":[[1,"    python.print(\"A ghost \")"]]}]}]},{"timestamp":1752795645528,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":245,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"pyprj\"\n"]]}]}]},{"timestamp":1752795673990,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":90,"length1":23,"diffs":[[1,"python.print(\"Ghost Game\")\n"]]},{"start1":204,"length1":144,"diffs":[[1,"    python.print(\"Three doors ahead\")\n    python.print(\"A ghost behind one\")\n    python.print(\"Which door do you open?\")\n    door = python.input(\"1, 2, or 3?\")\n"]]},{"start1":428,"length1":27,"diffs":[[1,"        python.print(\"GHOST!\")\n"]]},{"start1":502,"length1":75,"diffs":[[1,"        python.print(\"No ghost!\")\n        python.print(\"You enter the next room.\")\n"]]},{"start1":624,"length1":72,"diffs":[[1,"python.print(\"Run away!\")\npython.print(\"Game over! You scored \" + (\"\" + score))\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":81,"length1":64,"diffs":[[1,"//% color=\"#3178C6\" icon=\"\\uf81f\" block=\"Python\"\nnamespace python {\n"]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":552,"length1":58,"diffs":[[1,"python.print(\"Game over! You scored \" + str(score))"]]}]}]},{"timestamp":1752795997027,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":23,"length1":23,"diffs":[[1,"python.print(\"Ghost Game\")\n"]]},{"start1":130,"length1":144,"diffs":[[1,"    python.print(\"Three doors ahead\")\n    python.print(\"A ghost behind one\")\n    python.print(\"Which door do you open?\")\n    door = python.input(\"1, 2, or 3?\")\n"]]},{"start1":346,"length1":27,"diffs":[[1,"        python.print(\"GHOST!\")\n"]]},{"start1":417,"length1":75,"diffs":[[1,"        python.print(\"No ghost!\")\n        python.print(\"You enter the next room.\")\n"]]},{"start1":526,"length1":76,"diffs":[[1,"python.print(\"Run away!\")\npython.print(\"Game over! You scored \" + (\"\" + str(score)))"]]}]}]},{"timestamp":1752797271678,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":245,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1752797295137,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":359,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</variable><variable id=\"RfG2~llf}p~#}9N*`oSg\">ghost_door</variable><variable id=\"8f1oGA+pK4SP(_Ia:$fO\">door</variable><variable id=\"$Bk?;fU8B)zt0PhK0NYL\">door_num</variable><variable id=\"BKmyjJ[yn|9%hp/T[u=5\">score</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let ghost_door: number;\" numlines=\"1\" declaredvars=\"ghost_door\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let door: string;\" numlines=\"1\" declaredvars=\"door\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let door_num: any;\" numlines=\"1\" declaredvars=\"door_num\"></mutation><next><block type=\"python_print\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ghost Game</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Ghost Game</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"device_while\"><value name=\"COND\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</field></block></value><statement name=\"DO\"><block type=\"variables_set\"><field name=\"VAR\" id=\"RfG2~llf}p~#}9N*`oSg\">ghost_door</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"random_randint\"><value name=\"a\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><value name=\"b\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Three doors ahead</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A ghost behind one</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Which door do you open?</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8f1oGA+pK4SP(_Ia:$fO\">door</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"python_input\"><value name=\"prompt\"><shadow type=\"text\"><field name=\"TEXT\">1, 2, or 3?</field></shadow></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"$Bk?;fU8B)zt0PhK0NYL\">door_num</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_parseint\"><value name=\"text\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8f1oGA+pK4SP(_Ia:$fO\">door</field></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"$Bk?;fU8B)zt0PhK0NYL\">door_num</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"RfG2~llf}p~#}9N*`oSg\">ghost_door</field></block></value></block></value><statement name=\"DO0\"><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">GHOST!</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></next></block></statement><statement name=\"ELSE\"><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">No ghost!</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">You enter the next room.</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"BKmyjJ[yn|9%hp/T[u=5\">score</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BKmyjJ[yn|9%hp/T[u=5\">score</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Run away!</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Game over! You scored </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BKmyjJ[yn|9%hp/T[u=5\">score</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"let ghost_door: number;\nlet door: string;\nlet door_num: any;\nlet score = 0\n//  Ghost Game\npy.print(\"Ghost Game\")\nlet feeling_brave = true\nwhile (feeling_brave) {\n    ghost_door = random.randint(1, 3)\n    py.print(\"Three doors ahead\")\n    py.print(\"A ghost behind one\")\n    py.print(\"Which door do you open?\")\n    door = py.input(\"1, 2, or 3?\")\n    door_num = parseInt(door)\n    if (door_num == ghost_door) {\n        py.print(\"GHOST!\")\n        feeling_brave = false\n    } else {\n        py.print(\"No ghost!\")\n        py.print(\"You enter the next room.\")\n        score = score + 1\n    }\n    \n}\npy.print(\"Run away!\")\npy.print(\"Game over! You scored \" + (\"\" + score))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":245,"length1":44,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":0,"length1":0,"diffs":[[1,"score = 0\n# Ghost Game\npy.print(\"Ghost Game\")\nfeeling_brave = True\nwhile feeling_brave:\n    ghost_door = random.randint(1, 3)\n    py.print(\"Three doors ahead\")\n    py.print(\"A ghost behind one\")\n    py.print(\"Which door do you open?\")\n    door = py.input(\"1, 2, or 3?\")\n    door_num = int(door)\n    if door_num == ghost_door:\n        py.print(\"GHOST!\")\n        feeling_brave = False\n    else:\n        py.print(\"No ghost!\")\n        py.print(\"You enter the next room.\")\n        score = score + 1\npy.print(\"Run away!\")\npy.print(\"Game over! You scored \" + (\"\" + str(score)))"]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1752786157328,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Python\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1752790677666,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Python\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1752793212054,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","custom.ts":"/**\n * Uma coleção de blocos inspirados em funções comuns do Python.\n */\n//% color=\"#3178C6\" icon=\"\\uf81f\" block=\"Python\"\n// A cor é um azul \"Python\", e o ícone é o logo do Python da biblioteca Font Awesome.\nnamespace python {\n\n    /**\n     * Exibe uma mensagem na tela por um curto período.\n     * Equivalente a print() em muitos contextos de aprendizado.\n     * @param text O texto a ser exibido, eg: \"Olá, Mundo!\"\n     */\n    //% block=\"print %text\"\n    //% group=\"I/O\" weight=100\n    export function print(text: any): void {\n        // Usamos 'any' para que o bloco aceite números, strings, etc., e os converta.\n        game.splash(text);\n    }\n\n    /**\n     * Pausa a execução do programa por um número de segundos.\n     * Equivalente a time.sleep().\n     * @param seconds A duração da pausa em segundos, eg: 1.5\n     */\n    //% block=\"sleep %seconds seconds\"\n    //% group=\"Control\" weight=90\n    export function sleep(seconds: number): void {\n        pause(seconds * 1000);\n    }\n\n    /**\n     * Pede ao usuário para digitar um texto e retorna o que foi digitado.\n     * Equivalente a input().\n     * @param prompt O texto a ser exibido para o usuário, eg: \"Qual é o seu nome?\"\n     */\n    //% block=\"input %prompt\"\n    //% group=\"I/O\" weight=80\n    export function input(prompt: string): string {\n        return game.askForString(prompt);\n    }\n\n    /**\n     * Retorna o número de itens em uma lista.\n     * Equivalente a len().\n     * @param list A lista a ser medida.\n     */\n    //% block=\"len of %list=variables_get(my_list)\"\n    //% group=\"Lists\" weight=60\n    export function len(list: any[]): number {\n        return list.length;\n    }\n\n    /**\n     * Converte qualquer valor para um texto (string).\n     * Equivalente a str().\n     * @param value O valor a ser convertido.\n     */\n    //% block=\"str %value\"\n    //% group=\"Casting\" weight=50\n    export function str(value: any): string {\n        return value;\n    }\n\n    /**\n     * Converte um texto para um número inteiro.\n     * Equivalente a int().\n     * @param text O texto a ser convertido, eg: \"123\"\n     */\n    //% block=\"int %text\"\n    //% group=\"Casting\" weight=40\n    export function int(text: string): number {\n        return parseInt(text);\n    }\n}","main.py":"\ncountdown = [1, 2, 3]\ncountdown.reverse()\npython.print(countdown)\n","pxt.json":"{\n    \"name\": \"Python\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"custom.ts\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1752795015525,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","custom.ts":"/**\n * Funções básicas de I/O e manipulação de strings inspiradas no Python.\n */\n//% color=\"#3178C6\" icon=\"\\uf81f\" block=\"Python\"\nnamespace python {\n\n    /**\n     * Exibe uma mensagem na tela por um curto período.\n     * Equivalente a print() em muitos contextos de aprendizado.\n     * @param text O texto a ser exibido, eg: \"Olá, Mundo!\"\n     */\n    //% block=\"print %text\"\n    //% group=\"I/O\" weight=100\n    export function print(text: any): void {\n        game.splash(text);\n    }\n\n    /**\n     * Pede ao usuário para digitar um texto e retorna o que foi digitado.\n     * Equivalente a input().\n     * @param prompt O texto a ser exibido para o usuário, eg: \"Qual é o seu nome?\"\n     */\n    //% block=\"input %prompt\"\n    //% group=\"I/O\" weight=90\n    export function input(prompt: string): string {\n        return game.askForString(prompt);\n    }\n\n    /**\n     * Retorna uma cópia da string com todos os caracteres em minúsculas.\n     * @param text A string para converter, eg: \"OLÁ\"\n     */\n    //% block=\"lower %text\"\n    //% group=\"String\" weight=80\n    export function lower(text: string): string {\n        return text.toLowerCase();\n    }\n\n    /**\n     * Retorna uma cópia da string com todos os caracteres em maiúsculas.\n     * @param text A string para converter, eg: \"olá\"\n     */\n    //% block=\"upper %text\"\n    //% group=\"String\" weight=70\n    export function upper(text: string): string {\n        return text.toUpperCase();\n    }\n\n    /**\n     * Retorna uma cópia da string com a primeira ocorrência de 'old' substituída por 'new'.\n     * @param text A string original, eg: \"Olá, mundo!\"\n     * @param old O texto a ser substituído, eg: \"mundo\"\n     * @param new O novo texto, eg: \"MakeCode\"\n     */\n    //% block=\"replace in %text find %old with %new\"\n    //% group=\"String\" weight=60\n    export function replace(text: string, old: string, new_: string): string {\n        // Usamos new_ para evitar conflito com a palavra-chave 'new'\n        return text.replace(old, new_);\n    }\n}\n\n/**\n * Funções relacionadas a tempo, inspiradas no módulo 'time' do Python.\n */\n//% color=\"#6A5ACD\" icon=\"\\uf017\" block=\"Time\"\nnamespace time {\n    /**\n     * Pausa a execução do programa por um número de segundos.\n     * Equivalente a time.sleep().\n     * @param seconds A duração da pausa em segundos, eg: 1.5\n     */\n    //% block=\"sleep %seconds seconds\"\n    //% weight=100\n    export function sleep(seconds: number): void {\n        pause(seconds * 1000);\n    }\n\n    /**\n     * Retorna o tempo em segundos desde o início do jogo.\n     * Útil para medir intervalos de tempo. Equivalente a time.time() em muitos casos de uso em jogos.\n     */\n    //% block=\"time\"\n    //% weight=90\n    export function time(): number {\n        return game.runtime() / 1000;\n    }\n}\n\n/**\n * Funções para geração de números aleatórios, inspiradas no módulo 'random' do Python.\n */\n//% color=\"#B22222\" icon=\"\\uf1d8\" block=\"Random\"\nnamespace random {\n    /**\n     * Retorna um inteiro aleatório no intervalo [a, b], incluindo ambos os pontos finais.\n     * @param a O limite inferior, eg: 1\n     * @param b O limite superior, eg: 100\n     */\n    //% block=\"randint from %a to %b\"\n    //% weight=100\n    export function randint(a: number, b: number): number {\n        const lista = [];\n        for (let i = a; i <= b; i++) {\n            lista.push(i);\n        }\n        return Math.pickRandom(lista);\n    }\n\n    /**\n     * Retorna um elemento aleatório de uma lista.\n     * @param list A lista da qual escolher um elemento.\n     */\n    //% block=\"choice from %list=variables_get(my_list)\"\n    //% weight=90\n    export function choice(list: any[]): any {\n        if (!list || list.length === 0) {\n            return undefined;\n        }\n        return list[randint(0, list.length - 1)];\n    }\n\n    /**\n     * Retorna um inteiro aleatório de range(start, stop, step).\n     * Não inclui o 'stop'.\n     */\n    //% block=\"randrange start %start stop %stop step %step\"\n    //% start.defl=0\n    //% step.defl=1\n    //% weight=80\n    export function randrange(start: number, stop: number, step: number = 1): number {\n        const width = stop - start;\n        if (step === 0 || (step > 0 && width <= 0) || (step < 0 && width >= 0)) {\n            // Retorna NaN ou lança um erro para casos inválidos, como no Python\n            return NaN;\n        }\n        const n = Math.ceil(width / step);\n        const i = randint(0, n - 1);\n        return start + i * step;\n    }\n}\n\n/**\n * Constantes e utilitários de string, inspirados no módulo 'string' do Python.\n */\n//% color=\"#FF8C00\" icon=\"\\uf031\" block=\"String\"\nnamespace string {\n    /**\n     * Uma string contendo todos os caracteres de pontuação ASCII.\n     */\n    //% block=\"punctuation\"\n    //% group=\"Constants\" weight=100\n    export function punctuation() {\n        return `!\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`;\n    }\n\n    /**\n     * Uma string contendo todos os dígitos '0123456789'.\n     */\n    //% block=\"digits\"\n    //% group=\"Constants\" weight=90\n    export function digits() {\n        return \"0123456789\";\n    }\n\n    /**\n     * Uma string contendo todas as letras ASCII minúsculas.\n     */\n    //% block=\"ascii_lowercase\"\n    //% group=\"Constants\" weight=80\n    export function ascii_lowercase() {\n        return \"abcdefghijklmnopqrstuvwxyz\";\n    }\n\n    /**\n     * Uma string contendo todas as letras ASCII maiúsculas.\n     */\n    //% block=\"ascii_uppercase\"\n    //% group=\"Constants\" weight=70\n    export function ascii_uppercase() {\n        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    }\n\n    /**\n     * Uma string contendo todas as letras ASCII (maiúsculas e minúsculas).\n     */\n    //% block=\"ascii_letters\"\n    //% group=\"Constants\" weight=60\n    export function ascii_letters() {\n        return ascii_lowercase() + ascii_uppercase();\n    }\n}","main.py":"# Ghost Game\n\nimport random\n\npython.print(\"Ghost Game\")\n\nfeeling_brave = True\nscore = 0\n\nwhile feeling_brave:\n    ghost_door = random.randint(1, 3)\n    python.print(\"Three doors ahead\")\n    python.print(\"A ghost \")","pxt.json":"{\n    \"name\": \"Python\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"custom.ts\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1752797271678,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</variable><variable id=\"RfG2~llf}p~#}9N*`oSg\">ghost_door</variable><variable id=\"8f1oGA+pK4SP(_Ia:$fO\">door</variable><variable id=\"$Bk?;fU8B)zt0PhK0NYL\">door_num</variable><variable id=\"BKmyjJ[yn|9%hp/T[u=5\">score</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let ghost_door: number;\" numlines=\"1\" declaredvars=\"ghost_door\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let door: string;\" numlines=\"1\" declaredvars=\"door\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let door_num: any;\" numlines=\"1\" declaredvars=\"door_num\"></mutation><next><block type=\"python_print\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ghost Game</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Ghost Game</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"device_while\"><value name=\"COND\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</field></block></value><statement name=\"DO\"><block type=\"variables_set\"><field name=\"VAR\" id=\"RfG2~llf}p~#}9N*`oSg\">ghost_door</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"random_randint\"><value name=\"a\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><value name=\"b\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Three doors ahead</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">A ghost behind one</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Which door do you open?</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8f1oGA+pK4SP(_Ia:$fO\">door</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"python_input\"><value name=\"prompt\"><shadow type=\"text\"><field name=\"TEXT\">1, 2, or 3?</field></shadow></value></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"$Bk?;fU8B)zt0PhK0NYL\">door_num</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_parseint\"><value name=\"text\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8f1oGA+pK4SP(_Ia:$fO\">door</field></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"$Bk?;fU8B)zt0PhK0NYL\">door_num</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"RfG2~llf}p~#}9N*`oSg\">ghost_door</field></block></value></block></value><statement name=\"DO0\"><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">GHOST!</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"-yw}a;%Rt,_%}degzp#e\">feeling_brave</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></next></block></statement><statement name=\"ELSE\"><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">No ghost!</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">You enter the next room.</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"BKmyjJ[yn|9%hp/T[u=5\">score</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BKmyjJ[yn|9%hp/T[u=5\">score</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"python_print\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Run away!</field></shadow></value><next><block type=\"python_print\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Game over! You scored </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"BKmyjJ[yn|9%hp/T[u=5\">score</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"let ghost_door: number;\nlet door: string;\nlet door_num: any;\nlet score = 0\n//  Ghost Game\npy.print(\"Ghost Game\")\nlet feeling_brave = true\nwhile (feeling_brave) {\n    ghost_door = random.randint(1, 3)\n    py.print(\"Three doors ahead\")\n    py.print(\"A ghost behind one\")\n    py.print(\"Which door do you open?\")\n    door = py.input(\"1, 2, or 3?\")\n    door_num = parseInt(door)\n    if (door_num == ghost_door) {\n        py.print(\"GHOST!\")\n        feeling_brave = false\n    } else {\n        py.print(\"No ghost!\")\n        py.print(\"You enter the next room.\")\n        score = score + 1\n    }\n    \n}\npy.print(\"Run away!\")\npy.print(\"Game over! You scored \" + (\"\" + score))\n","README.md":" ","assets.json":"","custom.ts":"/**\n * Funções básicas de I/O e manipulação de strings inspiradas no Python.\n */\n//% color=\"#3178C6\" icon=\"\\uf121\" block=\"Python\"\nnamespace py {\n\n    /**\n     * Exibe uma mensagem na tela por um curto período.\n     * Equivalente a print() em muitos contextos de aprendizado.\n     * @param text O texto a ser exibido, eg: \"Olá, Mundo!\"\n     */\n    //% block=\"print %text\"\n    //% group=\"I/O\" weight=100\n    export function print(text: any): void {\n        game.splash(text);\n    }\n\n    /**\n     * Pede ao usuário para digitar um texto e retorna o que foi digitado.\n     * Equivalente a input().\n     * @param prompt O texto a ser exibido para o usuário, eg: \"Qual é o seu nome?\"\n     */\n    //% block=\"input %prompt\"\n    //% group=\"I/O\" weight=90\n    export function input(prompt: string): string {\n        return game.askForString(prompt);\n    }\n\n    /**\n     * Retorna uma cópia da string com todos os caracteres em minúsculas.\n     * @param text A string para converter, eg: \"OLÁ\"\n     */\n    //% block=\"lower %text\"\n    //% group=\"String\" weight=80\n    export function lower(text: string): string {\n        return text.toLowerCase();\n    }\n\n    /**\n     * Retorna uma cópia da string com todos os caracteres em maiúsculas.\n     * @param text A string para converter, eg: \"olá\"\n     */\n    //% block=\"upper %text\"\n    //% group=\"String\" weight=70\n    export function upper(text: string): string {\n        return text.toUpperCase();\n    }\n\n    /**\n     * Retorna uma cópia da string com a primeira ocorrência de 'old' substituída por 'new'.\n     * @param text A string original, eg: \"Olá, mundo!\"\n     * @param old O texto a ser substituído, eg: \"mundo\"\n     * @param new O novo texto, eg: \"MakeCode\"\n     */\n    //% block=\"replace in %text find %old with %new\"\n    //% group=\"String\" weight=60\n    export function replace(text: string, old: string, new_: string): string {\n        // Usamos new_ para evitar conflito com a palavra-chave 'new'\n        return text.replace(old, new_);\n    }\n}\n\n/**\n * Funções relacionadas a tempo, inspiradas no módulo 'time' do Python.\n */\n//% color=\"#6A5ACD\" icon=\"\\uf017\" block=\"Time\"\nnamespace time {\n    /**\n     * Pausa a execução do programa por um número de segundos.\n     * Equivalente a time.sleep().\n     * @param seconds A duração da pausa em segundos, eg: 1.5\n     */\n    //% block=\"sleep %seconds seconds\"\n    //% weight=100\n    export function sleep(seconds: number): void {\n        pause(seconds * 1000);\n    }\n\n    /**\n     * Retorna o tempo em segundos desde o início do jogo.\n     * Útil para medir intervalos de tempo. Equivalente a time.time() em muitos casos de uso em jogos.\n     */\n    //% block=\"time\"\n    //% weight=90\n    export function time(): number {\n        return game.runtime() / 1000;\n    }\n}\n\n/**\n * Funções para geração de números aleatórios, inspiradas no módulo 'random' do Python.\n */\n//% color=\"#B22222\" icon=\"\\uf1d8\" block=\"Random\"\nnamespace random {\n    /**\n     * Retorna um inteiro aleatório no intervalo [a, b], incluindo ambos os pontos finais.\n     * @param a O limite inferior, eg: 1\n     * @param b O limite superior, eg: 100\n     */\n    //% block=\"randint from %a to %b\"\n    //% weight=100\n    export function randint(a: number, b: number): number {\n        const lista = [];\n        for (let i = a; i <= b; i++) {\n            lista.push(i);\n        }\n        return Math.pickRandom(lista);\n    }\n\n    /**\n     * Retorna um elemento aleatório de uma lista.\n     * @param list A lista da qual escolher um elemento.\n     */\n    //% block=\"choice from %list=variables_get(my_list)\"\n    //% weight=90\n    export function choice(list: any[]): any {\n        if (!list || list.length === 0) {\n            return undefined;\n        }\n        return list[randint(0, list.length - 1)];\n    }\n\n    /**\n     * Retorna um inteiro aleatório de range(start, stop, step).\n     * Não inclui o 'stop'.\n     */\n    //% block=\"randrange start %start stop %stop step %step\"\n    //% start.defl=0\n    //% step.defl=1\n    //% weight=80\n    export function randrange(start: number, stop: number, step: number = 1): number {\n        const width = stop - start;\n        if (step === 0 || (step > 0 && width <= 0) || (step < 0 && width >= 0)) {\n            // Retorna NaN ou lança um erro para casos inválidos, como no Python\n            return NaN;\n        }\n        const n = Math.ceil(width / step);\n        const i = randint(0, n - 1);\n        return start + i * step;\n    }\n}\n\n/**\n * Constantes e utilitários de string, inspirados no módulo 'string' do Python.\n */\n//% color=\"#FF8C00\" icon=\"\\uf031\" block=\"String\"\nnamespace string {\n    /**\n     * Uma string contendo todos os caracteres de pontuação ASCII.\n     */\n    //% block=\"punctuation\"\n    //% group=\"Constants\" weight=100\n    export function punctuation() {\n        return `!\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`;\n    }\n\n    /**\n     * Uma string contendo todos os dígitos '0123456789'.\n     */\n    //% block=\"digits\"\n    //% group=\"Constants\" weight=90\n    export function digits() {\n        return \"0123456789\";\n    }\n\n    /**\n     * Uma string contendo todas as letras ASCII minúsculas.\n     */\n    //% block=\"ascii_lowercase\"\n    //% group=\"Constants\" weight=80\n    export function ascii_lowercase() {\n        return \"abcdefghijklmnopqrstuvwxyz\";\n    }\n\n    /**\n     * Uma string contendo todas as letras ASCII maiúsculas.\n     */\n    //% block=\"ascii_uppercase\"\n    //% group=\"Constants\" weight=70\n    export function ascii_uppercase() {\n        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    }\n\n    /**\n     * Uma string contendo todas as letras ASCII (maiúsculas e minúsculas).\n     */\n    //% block=\"ascii_letters\"\n    //% group=\"Constants\" weight=60\n    export function ascii_letters() {\n        return ascii_lowercase() + ascii_uppercase();\n    }\n}","main.py":"score = 0\n# Ghost Game\npython.print(\"Ghost Game\")\nfeeling_brave = True\nwhile feeling_brave:\n    ghost_door = random.randint(1, 3)\n    python.print(\"Three doors ahead\")\n    python.print(\"A ghost behind one\")\n    python.print(\"Which door do you open?\")\n    door = python.input(\"1, 2, or 3?\")\n    door_num = int(door)\n    if door_num == ghost_door:\n        python.print(\"GHOST!\")\n        feeling_brave = False\n    else:\n        python.print(\"No ghost!\")\n        python.print(\"You enter the next room.\")\n        score = score + 1\npython.print(\"Run away!\")\npython.print(\"Game over! You scored \" + (\"\" + str(score)))","pxt.json":"{\n    \"name\": \"Python\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"custom.ts\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1752797369000}